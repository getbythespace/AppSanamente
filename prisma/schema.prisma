generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// *
/// * =================== MODELOS PRINCIPALES ===================
model User {
  id                         String              @id @default(cuid())
  email                      String              @unique
  rut                        String              @unique
  firstName                  String
  lastNamePaternal           String
  lastNameMaternal           String
  dob                        DateTime?
  isPsychologist             Boolean             @default(false)
  organizationId             String?
  assignedPsychologistId     String?
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  status                     UserStatus          @default(ACTIVE)
  activeRole                 String?
  auditLogs                  AuditLog[]          @relation("UserAuditLogs")
  ClinicalEntry              ClinicalEntry[]
  diagnosesAsPatient         Diagnosis[]         @relation("PatientDiagnoses")
  diagnosesAsPsychologist    Diagnosis[]         @relation("PsychologistDiagnoses")
  moodEntries                MoodEntry[]
  invitationsSent            Invitation[]        @relation("InvitedBy")
  assignmentsAsPatient       PatientAssignment[] @relation("AssignmentsAsPatient")
  assignmentsAsPsychologist  PatientAssignment[] @relation("AssignmentsAsPsychologist")
  planChangeRequestsAuthored PlanChangeRequest[] @relation("PlanChangeRequestRequester")
  planChangeRequestsReviewed PlanChangeRequest[] @relation("PlanChangeRequestReviewer")
  reminder                   PatientReminder?
  sessionNotesAsPatient      SessionNote[]       @relation("PatientSessionNotes")
  sessionNotesAsPsychologist SessionNote[]       @relation("PsychologistSessionNotes")
  psychologist               User?               @relation("PsychologistPatients", fields: [assignedPsychologistId], references: [id])
  patients                   User[]              @relation("PsychologistPatients")
  organization               Organization?       @relation(fields: [organizationId], references: [id])
  UserInvitation             UserInvitation[]
  roles                      UserRole[]

  @@index([organizationId])
  @@index([assignedPsychologistId])
  @@index([status])
}

model UserRole {
  id     String   @id @default(cuid())
  userId String
  role   RoleType
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model Organization {
  id                 String              @id @default(cuid())
  name               String
  rut                String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  plan               OrgPlan             @default(TEAM)
  invitations        Invitation[]
  assignments        PatientAssignment[]
  planChangeRequests PlanChangeRequest[]
  planLimit          PlanLimit?
  users              User[]
  UserInvitation     UserInvitation[]

  @@index([plan])
}

/// *
/// * ============ REGISTROS DE ÁNIMO (antes Entry) ============
model MoodEntry {
  id        String   @id @default(cuid())
  patientId String
  score     Int
  comment   String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   User     @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, date])
  @@index([patientId, date])
  @@map("Entry")
}

/// *
/// * ======================= AUDITORÍA =======================
model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  targetId    String?
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation("UserAuditLogs", fields: [userId], references: [id])
}

/// *
/// * =================== BITÁCORA DE SESIÓN ===================
/// * (añadimos assignmentId y editableUntil, sin romper lo existente)
model SessionNote {
  id             String             @id @default(cuid())
  patientId      String
  psychologistId String
  note           String
  date           DateTime           @default(now())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  assignmentId   String?
  editableUntil  DateTime?
  assignment     PatientAssignment? @relation("AssignmentSessionNotes", fields: [assignmentId], references: [id])
  patient        User               @relation("PatientSessionNotes", fields: [patientId], references: [id], onDelete: Cascade)
  psychologist   User               @relation("PsychologistSessionNotes", fields: [psychologistId], references: [id], onDelete: Cascade)

  @@index([assignmentId])
  @@index([patientId, date])
  @@index([psychologistId, date])
}

/// *
/// * ============ DIAGNÓSTICOS Y VERSIONES ============
model Diagnosis {
  id               String             @id @default(cuid())
  patientId        String
  psychologistId   String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  archived         Boolean            @default(false)
  text             String
  patient          User               @relation("PatientDiagnoses", fields: [patientId], references: [id], onDelete: Cascade)
  psychologist     User               @relation("PsychologistDiagnoses", fields: [psychologistId], references: [id], onDelete: Cascade)
  previousVersions DiagnosisArchive[]
}

model DiagnosisArchive {
  id          String    @id @default(cuid())
  diagnosisId String
  text        String
  archivedAt  DateTime  @default(now())
  diagnosis   Diagnosis @relation(fields: [diagnosisId], references: [id], onDelete: Cascade)
}

/// *
/// * ======================= RECORDATORIO =======================
/// * (antes Reminder; el código lo verá como prisma.patientReminder)
model PatientReminder {
  id      String  @id @default(cuid())
  userId  String  @unique
  hour    Int
  minute  Int
  enabled Boolean @default(true)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Reminder")
}

/// *
/// * ======= SOLICITUDES DE PLAN (OWNER -> SUPERADMIN) =======
model PlanChangeRequest {
  id             String        @id @default(cuid())
  organizationId String
  requestedById  String
  fromPlan       OrgPlan
  toPlan         OrgPlan
  reason         String?
  status         RequestStatus @default(PENDING)
  reviewedById   String?
  reviewedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  requestedBy    User          @relation("PlanChangeRequestRequester", fields: [requestedById], references: [id], onDelete: Cascade)
  reviewedBy     User?         @relation("PlanChangeRequestReviewer", fields: [reviewedById], references: [id])

  @@index([status])
  @@index([organizationId])
}

/// *
/// * ============ NUEVO: ASIGNACIÓN PACIENTE↔PSICÓLOGO ============
model PatientAssignment {
  id              String           @id @default(cuid())
  organizationId  String
  patientId       String
  psychologistId  String
  status          AssignmentStatus @default(ACTIVE)
  startedAt       DateTime         @default(now())
  endedAt         DateTime?
  endedReason     String?
  clinicalEntries ClinicalEntry[]  @relation("AssignmentClinicalEntries")
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  patient         User             @relation("AssignmentsAsPatient", fields: [patientId], references: [id], onDelete: Cascade)
  psychologist    User             @relation("AssignmentsAsPsychologist", fields: [psychologistId], references: [id], onDelete: Cascade)
  sessionNotes    SessionNote[]    @relation("AssignmentSessionNotes")

  @@index([organizationId])
  @@index([patientId])
  @@index([psychologistId])
  @@index([status])
}

/// *
/// * ============ NUEVO: HOJA CLÍNICA (append-only) ============
model ClinicalEntry {
  id           String            @id @default(cuid())
  assignmentId String
  authorId     String
  content      String
  createdAt    DateTime          @default(now())
  assignment   PatientAssignment @relation("AssignmentClinicalEntries", fields: [assignmentId], references: [id], onDelete: Cascade)
  author       User              @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@index([assignmentId])
  @@index([authorId, createdAt])
}

/// *
/// * ============ NUEVO: INVITACIONES =============
model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  role           RoleType
  invitedById    String?
  token          String       @unique
  status         String       @default("PENDING")
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
  invitedBy      User?        @relation("InvitedBy", fields: [invitedById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, role, status])
  @@index([email])
}

/// *
/// * ============ NUEVO: LÍMITES DEL PLAN =============
model PlanLimit {
  id             String       @id @default(cuid())
  organizationId String       @unique
  assistantsMax  Int          @default(2)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model UserInvitation {
  id               String       @id @default(dbgenerated("gen_random_uuid()"))
  organizationId   String
  email            String
  role             RoleType
  token            String       @unique
  status           String       @default("PENDING")
  expiresAt        DateTime?    @db.Timestamptz(6)
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  invitedById      String?
  firstName        String?
  lastNamePaternal String?
  lastNameMaternal String?
  rut              String?
  User             User?        @relation(fields: [invitedById], references: [id], onUpdate: NoAction, map: "UserInvitation_invitedBy_fk")
  Organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserInvitation_org_fk")

  @@index([email])
  @@index([organizationId, role, status], map: "UserInvitation_org_role_status_idx")
}

/// *
/// * ======================= ENUMS =======================
enum RoleType {
  ADMIN
  PSYCHOLOGIST
  PATIENT
  ASSISTANT
  SUPERADMIN
  OWNER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

enum OrgPlan {
  SOLO
  TEAM
  TRIAL
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}

/// *
/// * NUEVO: estado de la vinculación paciente↔psicólogo
enum AssignmentStatus {
  ACTIVE
  ENDED
}
